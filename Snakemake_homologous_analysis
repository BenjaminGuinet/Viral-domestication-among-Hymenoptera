###Snake file
#Note : This SnakeFile allows to conduct a sequence homology analysis in which eukaryotic genomes (here Hymenoptera) are the queries and the database is all viral proteins. 
# Each viral hit overlap is then used to define candidate loci for viral endogenization.

import pandas as pd
import re 
import os

#Programs
mmseqs2="/beegfs/data/bguinet/TOOLS/mmseqs/bin/mmseqs" #(version 5daca424b162cc5fdf0b9cd151aebed86975cbf6)

#Load species names
Species_name_file="/beegfs/data/bguinet/these/Species_genome_names_test.txt"
list_of_names=[]
for names in open(Species_name_file,"r"):
 	list_of_names.append(names.replace("\n", ""))


#This rule contains all the expected output from all your rules within the snakefile 
rule all:
  input:
       "/beegfs/data/bguinet/these/Clustering3/Viral_protein_nodup_db",
       expand("/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/result_mmseqs2.m8", names = list_of_names),
       expand("/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2_V/result_mmseqs2_strand_V.m8", names = list_of_names),
       expand("/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2_V/result_mmseqs2_summary_V.m8", names = list_of_names),
       expand("/beegfs/data/bguinet/these/Genomes/{names}/Fasta_viral_loci.fna", names = list_of_names),
       expand("/beegfs/data/bguinet/these/Genomes/{names}/Fasta_viral_loci.faa",names = list_of_names)


#First create the viral db :

rule Create_viral_db:
      input:
        Viraldb="/beegfs/data/bguinet/these/Clustering3/Viral_protein_nodup.fa"
      output:
        Viral_mmseqs2_db="/beegfs/data/bguinet/these/Clustering3/Viral_protein_nodup_db"
      shell:
        """
        {mmseqs2} createdb {input.Viraldb} {output.Viral_mmseqs2_db}
        """
	
#Then run the BlastX (Mmseqs2) with Genomes as queries and Virus db as database 
rule Homology_analysis:
     params:
       threads="10",
       time="48:00:00",
       mem="5G",  #Carrefull if more than 40G -> --partition=bigmem
       name="Mmseqs2_{names}",
       out="/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/Mmseqs2_viral_search.out",
       err="/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/Mmseqs2_viral_search.error
    input:
       Viral_mmseqs2_db="/beegfs/data/bguinet/these/Clustering3/Viral_protein_nodup_db",
       Genomedb="/beegfs/data/bguinet/these/Genomes/{names}/{names}_corrected.fa"
    output:
        out= "/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/result_mmseqs2.m8",   
    shell:
        """
	#Create a directory where the BlastX results will be written 
        mkdir /beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/
	
        #Create the genome db 
        {mmseqs2} createdb {input.Genomedb} /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmseqs2/{wildcards.names}_mmseqs2_db
            
	#Run Mmseqs2 search equivalent BlastX
        {mmseqs2} search /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmseqs2/{wildcards.names}_mmseqs2_db {input.Viral_mmseqs2_db} /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmmseqs2/result_mmseqs2 /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmseqs2/tpm -a -s 7.5 -e 0.0001 --threads 10 --remove-tmp-files
        
	#Convert results with multiples columns 
        {mmseqs2} convertalis --format-output 'query,tlen,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qaln,tcov'  /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmmseqs2/{wildcards.names}_mmseqs2_db {input.Viral_mmseqs2_db} /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmmseqs2/result_mmseqs2 /beegfs/data/bguinet/these/Genomes/{wildcards.names}/run_mmmseqs2/result_mmseqs2.m8

        """

#Define_loci by first changing the strand of the results (hits on antisens strand changed to sens strand coordinates)
#And then use the script Overlapping_sequences_BUSCO_Viral_loci2.R to merge overlapping hits with GenomicRanges
#Note:  here we correct by the fact that we used MEC analysis wich changed the scaffolds names, if you do not have this issue please use -correct_scaf_name no arg in the 
rule Define_loci:
    input:
        Blast_tab="/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/result_mmseqs2.m8"
    output:
        out1= "/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/result_mmseqs2_strand_V.m8",
        out2= "/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/result_mmseqs2_strand_summary_V.m8"
    threads: 1
    shell:
        """
        PYTHONPATH="/beegfs/home/bguinet/.local/lib/"
        python3 /beegfs/home/bguinet/these_scripts_2/Make_change_strand_mmseqs.py -b {input.Blast_tab} -o {output.out1} -t virus
	/beegfs/data/soft/R-3.5.2/bin/Rscript /beegfs/home/bguinet/these_scripts_2/Overlapping_sequences_BUSCO_Viral_loci2.R {output.out1} {output.out2}
        """

           
#We extract candidates loci based on their coordinates on genomes 	   
#rule Extract_loci: 
rule Extract_loci:
    threads: 1
    log: 
         "/beegfs/data/bguinet/these/{names}_log_extract.txt"
    input: 
         Summary_file="/beegfs/data/bguinet/these/Genomes/{names}/run_mmseqs2/result_mmseqs2_strand_summary_V.m8"
    output: 
         Loci_dna_output="/beegfs/data/bguinet/these/Genomes/{names}/Fasta_viral_loci.fna"
    shell:
         """
         python3 /beegfs/home/bguinet/these_scripts_2/Extract_loci.py -s {wildcards.names} -l {input.Summary_file} -b /beegfs/data/bguinet/these/Genomes/{wildcards.names}/Fasta_viral_loci.bed -o {output.Loci_dna_output}  >& {log}
         #Add species name into the loci names 
	 sed -i 's@)@):{wildcards.names}@g' {output.Loci_dna_output} 
	 """
       
       
#We translate all the candidate loci 
rule Translate_loci:
    threads: 1
    input:
        Loci_dna="/beegfs/data/bguinet/these/Genomes/{names}/Fasta_viral_loci.fna",
	Viraldb="/beegfs/data/bguinet/these/Clustering3/Viral_protein_nodup.fa
    output:
        Loci_aa="/beegfs/data/bguinet/these/Genomes/{names}/Fasta_viral_loci.faa"
    shell:
         """
         python3 /beegfs/home/bguinet/these_scripts_2/Translate_DNA_to_AA.py -f {input.Loci_dna} -o {output.Loci_aa}
	 
	 #Concatenate protein loci and previous viral protein database
	 cat {output.Loci_aa} >> /beegfs/data/bguinet/these/Clustering3/Candidate_viral_loci_and_viral_protein.aa
         """
	 
	 

#We Filter all the candidate loci based on : 

rule Filter_loci:
	input: 
		Candidate_loci="/beegfs/data/bguinet/these/Clustering3/Candidate_viral_loci_and_viral_protein.aa",
		Nr_db="/beegfs/data/bguinet/these/NR_db"
	output:
		Candidate_loci_Nr_output="/beegfs/data/bguinet/these/Results/Candidate_viral_loci_Nr.m8,
		Candidate_loci_filtred_output="/beegfs/data/bguinet/these/Results/Candidate_viral_loci_filtred.m8"

	shell:
	"""
	        #Add viral protein sequences within the file with all virus candidat loci
	        cat {input.Viraldb}  >> /beegfs/data/bguinet/these/Clustering3/Candidate_viral_loci_and_viral_protein.aa
		#Put all Fasta sequence into one unique file :
		cat /beegfs/data/bguinet/these/Species_genome_names.txt | while read line; do cat /beegfs/data/bguinet/these/Genomes/${line}/Fasta_viral_loci.fna >> /beegfs/data/bguinet/these/Viral_sequences_loci/All_fasta_viral_loci.fna ; done 
		cat /beegfs/data/bguinet/these/Species_genome_names.txt | while read line; do cat /beegfs/data/bguinet/these/Genomes/${line}/Fasta_viral_loci.faa >> /beegfs/data/bguinet/these/Viral_sequences_loci/All_fasta_viral_loci.aa ; done 
		{mmseqs2} createdb {Candidate_loci} /beegfs/data/bguinet/these/Viral_sequences_loci/All_fasta_viral_loci_db
		{mmseqs2} search /beegfs/data/bguinet/these/Viral_sequences_loci/All_fasta_viral_loci_db {input.Nr_db}  /beegfs/data/bguinet/these/Results/Candidate_viral_loci_Nr /beegfs/data/bguinet/these/Results/Candidate_viral_loci_Nr_tpm 
		{mmseqs2} convertalis --format-output 'query,tlen,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,tcov' /beegfs/data/bguinet/these/Viral_sequences_loci/All_fasta_viral_loci_db /beegfs/data/bguinet/these/NR_db /beegfs/data/bguinet/these/Results/Candidate_viral_loci_Nr {output.Candidate_loci_Nr_output} -s 7 --threads 20
		python3 Filter_loci_with_NR.py  -Nr {output.Candidate_loci_Nr_output} -o {output.Candidate_loci_filtred_output}
		#Need to add a code within Filter_loci_with_NR.py in order to create a /beegfs/data/bguinet/these/Viral_sequences_loci/All_fasta_viral_loci_filtred.aa file
	""" 


